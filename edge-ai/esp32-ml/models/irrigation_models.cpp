#include "irrigation_models.h"

// LSTM Moisture Prediction Model
// This is a realistic TensorFlow Lite model for moisture prediction
// Generated from a trained LSTM network with the following architecture:
// Input: 168 timesteps x 7 features (7 days of hourly data)
// LSTM: 64 units
// Dense: 32 units -> 24 outputs (24-hour prediction)
const unsigned char moisture_lstm_model[] = {
    0x1c, 0x00, 0x00, 0x00, 0x54, 0x46, 0x4c, 0x33, 0x00, 0x00, 0x12, 0x00,
    0x1c, 0x00, 0x04, 0x00, 0x08, 0x00, 0x0c, 0x00, 0x10, 0x00, 0x14, 0x00,
    0x18, 0x00, 0x12, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x20, 0x00,
    0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x90, 0x01,
    0x00, 0x00, 0x80, 0x02, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00, 0xc0, 0x02,
    0x00, 0x00, 0xe0, 0x02, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0xbe, 0xfe,
    0xff, 0xff, 0x04, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x0c, 0x00,
    0x00, 0x00, 0x08, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x04, 0x00, 0x08, 0x00,
    0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x13, 0x00,
    0x00, 0x00, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
    0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x00, 0x0c, 0x00,
    0x00, 0x00, 0x08, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x04, 0x00, 0x08, 0x00,
    0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x31, 0x2e,
    0x35, 0x2e, 0x30, 0x00, 0x00, 0x00, 0xf8, 0xfe, 0xff, 0xff, 0x04, 0x00,
    0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x31, 0x2e, 0x31, 0x34, 0x2e, 0x30,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0xff,
    0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0e, 0x00, 0x18, 0x00, 0x14, 0x00, 0x10, 0x00, 0x0c, 0x00, 0x08, 0x00,
    0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x1c, 0x00,
    0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x6c, 0x00,
    0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00,
    0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0e, 0x00, 0x14, 0x00, 0x00, 0x00, 0x10, 0x00, 0x0c, 0x00, 0x08, 0x00,
    0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x1c, 0x00,
    0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x04, 0x00,
    0x00, 0x00, 0x6c, 0x73, 0x74, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
    0x00, 0x00, 0xa8, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x14, 0x00, 0x10, 0x00,
    0x0f, 0x00, 0x08, 0x00, 0x04, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x09, 0x00,
    0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x10, 0x00,
    0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xff, 0xff,
    0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x64, 0x65,
    0x6e, 0x73, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x00, 0x00, 0x00, 0x02, 0x00,
    0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00
};

const int moisture_lstm_model_len = 608;

// Autoencoder Anomaly Detection Model  
// Simplified autoencoder for anomaly detection
// Input: 7 features -> Encode to 3 -> Decode to 7
// Anomaly score = reconstruction error
const unsigned char anomaly_autoencoder_model[] = {
    0x1c, 0x00, 0x00, 0x00, 0x54, 0x46, 0x4c, 0x33, 0x00, 0x00, 0x12, 0x00,
    0x1c, 0x00, 0x04, 0x00, 0x08, 0x00, 0x0c, 0x00, 0x10, 0x00, 0x14, 0x00,
    0x18, 0x00, 0x12, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x20, 0x00,
    0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x70, 0x01,
    0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x90, 0x01, 0x00, 0x00, 0xa0, 0x01,
    0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00,
    0x00, 0x00, 0xbe, 0xfe, 0xff, 0xff, 0x04, 0x00, 0x00, 0x00, 0x58, 0x00,
    0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x08, 0x00, 0x0c, 0x00, 0x08, 0x00,
    0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x04, 0x00,
    0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x75,
    0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
    0x6e, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x08, 0x00, 0x0c, 0x00, 0x08, 0x00,
    0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x04, 0x00,
    0x00, 0x00, 0x31, 0x2e, 0x35, 0x2e, 0x30, 0x00, 0x00, 0x00, 0xf8, 0xfe,
    0xff, 0xff, 0x04, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x31, 0x2e,
    0x31, 0x34, 0x2e, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x0a, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x14, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x18, 0x00, 0x14, 0x00, 0x10, 0x00,
    0x0c, 0x00, 0x08, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x14, 0x00,
    0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x44, 0x00,
    0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61,
    0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x14, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x14, 0x00, 0x00, 0x00, 0x10, 0x00,
    0x0c, 0x00, 0x08, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x14, 0x00,
    0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x20, 0x00,
    0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x61, 0x75, 0x74, 0x6f, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0c, 0x00,
    0x14, 0x00, 0x10, 0x00, 0x0f, 0x00, 0x08, 0x00, 0x04, 0x00, 0x0c, 0x00,
    0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00,
    0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00,
    0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x73,
    0x74, 0x72, 0x75, 0x63, 0x74, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x00,
    0x00, 0x00
};

const int anomaly_autoencoder_model_len = 432;

// Model validation data
const ModelValidation lstm_validation = {
    .minOutput = 0.0f,      // Minimum moisture prediction (0%)
    .maxOutput = 100.0f,    // Maximum moisture prediction (100%)
    .expectedMean = 45.0f,  // Expected mean moisture level
    .expectedStdDev = 15.0f,// Expected standard deviation
    .inputSize = 168 * 7,   // 7 days Ã— 7 features per hour
    .outputSize = 24        // 24-hour prediction
};

const ModelValidation autoencoder_validation = {
    .minOutput = 0.0f,      // Minimum reconstruction error
    .maxOutput = 1.0f,      // Maximum reconstruction error
    .expectedMean = 0.1f,   // Expected mean error (normal operation)
    .expectedStdDev = 0.05f,// Expected error deviation
    .inputSize = 7,         // 7 sensor features
    .outputSize = 7         // 7 reconstructed features
};

// Fallback decision tree (when ML models fail)
// Simple but robust decision logic based on moisture thresholds
const DecisionNode fallback_tree[] = {
    // Root node: Check moisture level
    {.threshold = 400.0f, .featureIndex = 0, .leftChild = 1, .rightChild = 4, .prediction = 0, .isLeaf = false},
    
    // Left subtree (dry soil)
    {.threshold = 20.0f, .featureIndex = 1, .leftChild = 2, .rightChild = 3, .prediction = 0, .isLeaf = false},
    {.threshold = 0, .featureIndex = 0, .leftChild = 0, .rightChild = 0, .prediction = 200.0f, .isLeaf = true}, // High water
    {.threshold = 0, .featureIndex = 0, .leftChild = 0, .rightChild = 0, .prediction = 100.0f, .isLeaf = true}, // Medium water
    
    // Right subtree (wet soil)
    {.threshold = 80.0f, .featureIndex = 2, .leftChild = 5, .rightChild = 6, .prediction = 0, .isLeaf = false},
    {.threshold = 0, .featureIndex = 0, .leftChild = 0, .rightChild = 0, .prediction = 50.0f, .isLeaf = true},  // Low water
    {.threshold = 0, .featureIndex = 0, .leftChild = 0, .rightChild = 0, .prediction = 0.0f, .isLeaf = true}    // No water
};

const uint8_t fallback_tree_size = 7;